<?php

/**
 * @file
 * BOINC user delete - Lets users delete their own account
 */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Includes that provide supporting functions
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

require_once('includes/boincuser_delete.helpers.inc');

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
 * Hooks into core modules
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/**
 * Implementation of hook_perm().
 */
function boincuser_delete_perm() {
  return array('delete own account');
}

/**
 * Implementation of hook_menu().
 */
function boincuser_delete_menu() {
  $items['admin/boinc/user_delete'] = array(
    'title' => 'Preferences: BOINC user delete',
    'description' => "Configure the BOINC user delete action.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boincuser_delete_settings'),
    'access arguments' => array('administer users'),
    'file' => 'boincuser_delete.admin.inc',
  );
  return $items;
}

/**
 * Checks whether a user can delete an account.
 */
function boincuser_delete_access($account) {
  global $user;
  return ((user_access('administer users') || (user_access('delete own account') && $account->uid == $user->uid)) && $account->uid > 0);
}

/**
 * Implementation of hook_menu_alter().
 */
function boincuser_delete_menu_alter(&$callbacks) {
  $callbacks['user/%user/delete']['access callback'] = 'boincuser_delete_access';
  $callbacks['user/%user/delete']['access arguments'] = array(1);
  $callbacks['user/%user/delete']['type'] = MENU_CALLBACK;
}

/**
 * Implementation of hook_form_alter().
 */
function boincuser_delete_form_alter(&$form, $form_state, $form_id) {
  global $user;

  $graceperiod = variable_get('boincuser_delete_grace_period', 60*60*24*7*2);

  switch($form_id) {
    case 'user_profile_form':
      if ( ( user_access('delete own account') AND ($form['#uid'] == $user->uid) AND (arg(3)=='') ) OR ( user_access('administer users') ) ) {
        $form['delete'] = array(
          '#type' => 'submit',
          '#value' => bts('Delete Account', array(), null, 'boinc:delete-user-account'),
          '#weight' => 1009,
          '#submit' => array('user_edit_delete_submit'),
          '#prefix' => '<li class="tab">',
          '#suffix' => '</li>',
        );
      }
      else {
        unset($form['delete']);
      }
      break;
    case 'user_confirm_delete':
      $question = 'Are you sure you want to delete the account <em>' . htmlspecialchars($form['_account']['#value']->boincuser_name) . '</em>?';
      drupal_set_title($question);

      unset($form['description']);

      $form['main'] = array(
        '#type' => 'fieldset',
        '#weight' => 1,
      );
      // Disabled the ability for user to disable his/her account. Can uncomment these lines should be re-enabled.
      $form['main']['user_delete_action'] = array(
        '#type' => 'radios',
        //'#title' => t('Please choose an option'),
        //'#default_value' => 'boincuser_delete_disable',
        '#options' => array(
          //'boincuser_delete_disable' => bts('<b>Disable</b> the account after @graceperiod days. Afterwards you account will be disabled, but your user profile will be deleted.', array('@graceperiod' => $graceperiod/(60*60*24)), NULL, 'boinc:delete-user-account'),
          'boincuser_delete_delete' => bts('<b>Delete</b> the account after @graceperiod days. Afterwards your account will be deleted, and all posts/comments will be attributed to the Anonymous User. Your user profile will be deleted.', array('@graceperiod' => $graceperiod/(60*60*24)), NULL, 'boinc:delete-user-account'),
        ),
        '#weight' => 11,
      );

      $form['main']['help'] = array(
        '#type' => 'item',
        //'#title' => '<b>All options</b>',
        '#description' => bts('If you login to your account within @graceperiod days, the delete action will be canceled. If you choose to delete your account, after @graceperiod days, there is no way to recover your account!', array('@graceperiod' => $graceperiod/(60*60*24)), NULL, 'boinc:delete-user-account'),
        '#weight' => 21,
      );

      $form['separator_bottom'] = array(
        '#value' => '<div class="separator buttons"></div>',
        '#weight' => 999,
      );

      // Configure the action buttons
      $uid = $form['_account']['#value']->uid;
      $form['actions']['#weight'] = 1000;
      $form['actions']['form control tabs prefix'] = array(
        '#value' => '<ul class="form-control tab-list">',
        '#weight' => 1001,
      );

      unset($form['actions']['#prefix']);
      unset($form['actions']['#suffix']);
      $form['actions']['submit']['#prefix'] = '<li class="first tab">';
      $form['actions']['submit']['#suffix'] = '</li>';
      $form['actions']['submit']['#value'] = bts('Submit', array(), NULL, 'boinc:form-submit');
      $form['actions']['submit']['#weight'] = 1002;

      $form['actions']['cancel']['#prefix'] = '<li class="tab">';
      $form['actions']['cancel']['#suffix'] = '</li>';
      $form['actions']['cancel']['#weight'] = 1003;
      $form['actions']['cancel']['#value'] = l(bts('Cancel', array(), NULL, 'boinc:form-cancel'), 'account/info/edit');

      $form['actions']['form control tabs suffix'] = array(
        '#value' => '</ul>',
        '#weight' => 1010,
      );

      $form['#redirect'] = 'account/' . $uid;
      $form['#submit'] = array('boincuser_delete_submit');
      break;

  } // switch
}


/**
 * Disable or delete user and content after form submission.
 *
 * This function does not actually disable or delete a user. Instead a
 * field, delete_status, is set by this function for the
 * user. Normally, delete_status is 0. An account to be disabled has
 * delete_status=1, an account to be deleted has
 * delete_status=2. After a period of time has passed, the user's
 * account will be disabled or deleted. This is done in the
 * implementation of hook_cron().
 */
function boincuser_delete_submit($form, &$form_state) {
  global $user;

  $uid = $form_state['values']['_account']->uid;
  $account = user_load(array('uid' => $uid));

  if (!$account) {
    drupal_set_message(bts('ERROR: The user account @uid does not exist.', array('@uid' => $uid), array(), NULL, 'delete-user-account'), 'error');
    watchdog('user', 'Attempted to cancel non-existing user account: %uid.', array('%uid' => $uid), WATCHDOG_ERROR);
    return;
  }

  global $base_url;
  global $base_path;
  module_load_include('inc', 'rules', 'modules/system.rules');
  $mysubject = '';
  $mymessage = '';
  $site_name = variable_get('site_name', 'Drupal-BOINC');
  $site_url = $base_url . $base_path . "user/login?destination=home";

  // Default grace period is two weeks
  $graceperiod = variable_get('boincuser_delete_grace_period', 60*60*24*7*2);
  $fts = time() + $grace_period;

  // Perform the requested operation
  $op = $form_state['values']['user_delete_action'];
  switch ($op) {
    case 'boincuser_delete_disable':
      // Set delete_status in boincuser table. Set the grace period.
      $usql = 'UPDATE {boincuser} SET boincuser.delete_status=1, boincuser.grace_period=%d WHERE boincuser.uid=%d';
      $qrc = db_query($usql, $fts, $uid);
      $mysubject = "Notification of account disabled at {$site_name}";
      $mymessage = ''
        . "{$account->boincuser_name},\n"
        . "\n"
        . "We have received a request to disable your user account at "
        . "${site_name}. You have a grace period of "
        . $grace_period/(60*60*24)
        . " days to change your mind. Simply login to your account on the "
        . "${site_name} Web site and your request will be canceled.\n"
        . "\n"
        . "If you did not initiate this request, please login to the "
        . "${site_name} Web site (${site_url}) to cancel and then contact "
        . "the administrators.\n"
        . "\n"
        . "Thanks, \n"
        . "\n"
        . "{$site_name} support team";
      break;
    case 'boincuser_delete_delete':
      // Set delete_status in boincuser table. Set the grace period.
      $usql = 'UPDATE {boincuser} SET boincuser.delete_status=2, boincuser.grace_period=%d WHERE boincuser.uid=%d';
      $qrc = db_query($usql, $fts, $uid);
      $mysubject = "Notification of account deletion at {$site_name}";
      $mymessage = ''
        . "{$account->boincuser_name},\n"
        . "\n"
        . "We have received a request to DELETE your user account at "
        . "${site_name}. You have a grace period of "
        . $grace_period/(60*60*24)
        . " days to change your mind. Simply login to your account on the "
        . "${site_name} Web site and your request will be canceled.\n"
        . "\n"
        . "If you did not initiate this request, please login to the "
        . "${site_name} Web site (${site_url}) to cancel the deletion and "
        . "then contact the administrators.\n"
        . "\n"
        . "Thanks, \n"
        . "\n"
        . "{$site_name} support team";
      break;
  }

  // create array for sending email to user to notify account is being
  // disabled/deleted.
  $settings = array(
    'from' => '',
    'subject' => $mysubject,
    'message' => $mymessage,
  );
  rules_action_mail_to_user($account, $settings);

  // After cancelling account, ensure that user is logged out.
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // Destroy the current session:
  session_destroy();
  // Only variables can be passed by reference workaround.
  $null = NULL;
  user_module_invoke('logout', $null, $user);

  // Load the anonymous user
  $user = drupal_anonymous_user();

  $redirect = variable_get('boincuser_delete_redirect', '<front>');
  // Redirect
  if (!empty($redirect)) {
    drupal_goto($redirect);
  }
  else {
    drupal_goto();
  }
}


/**
 * Implementation of hook_user().
 */
function boincuser_delete_user($op, &$edit, &$account, $category = NULL) {
  if ($account->uid > 1) {
    switch($op) {
    case 'login':
        // Function is forward compatible to Drupal 7
        boincuser_delete_user_login($edit, $account);
      break;
    }
  }
}

/**
 * Implementation of hook_user_login (forward compatible to Drupal 7).
 */
function boincuser_delete_user_login(&$edit, $account) {
  // Check user delete_status, and if non-zero set to 0.
  $sql = 'SELECT boincuser.delete_status FROM {boincuser} WHERE boincuser.uid=%d';
  $delete_status = db_result(db_query($sql, $account->uid));
  if ($delete_status>0) {
    $usql = 'UPDATE {boincuser} SET boincuser.delete_status=0, boincuser.delete_notified=0, boincuser.grace_period=0 WHERE boincuser.uid=%d';
    $qrc = db_query($usql, $account->uid);
  }
}


/**
 * Implementation of hook_cron().
 */
function boincuser_delete_cron() {
  _boincuser_delete_expired();
}

/**
 * Either disable or delete a user after it's grace period expires.
 */
function _boincuser_delete_expired() {
  module_load_include('inc', 'drupal_queue', 'drupal_queue');
  $qdisable = DrupalQueue::get('queue_disable');
  $qdelete = DrupalQueue::get('queue_delete');
  $qnotify = DrupalQueue::get('queue_notify');

  // disable accounts
  $sql1 = "SELECT boincuser.uid AS uid FROM {boincuser} WHERE boincuser.delete_status=1 AND boincuser.grace_period < %d";
  $dbres1 = db_query($sql1, time());
  if ($dbres1) {
    while ($result = db_fetch_array($dbres1)) {
      $myuid = $result['uid'];
      $qdisable->createItem($myuid);
    }
  }

  // delete accounts
  $sql2 = "SELECT boincuser.uid AS uid FROM {boincuser} WHERE boincuser.delete_status=2 AND boincuser.grace_period < %d";
  $dbres2 = db_query($sql2, time());
  if ($dbres2) {
    while ($result = db_fetch_array($dbres2)) {
      $myuid = $result['uid'];
      $qdelete->createItem($myuid);
    }
  }

  // notify users disable/deletion is imminant
  $sql3 = "SELECT boincuser.uid AS uid, boincuser.delete_status AS ds FROM {boincuser} WHERE boincuser.delete_status>0 AND boincuser.delete_notified=0 AND (boincuser.grace_period - 60*60*24) < %d";
  $dbres3 = db_query($sql3, time());
  if ($dbres3) {
    while ($result = db_fetch_array($dbres3)) {
      $qnotify->createItem($result);
    }
  }
}

/**
 * Implementation of hook_cron_queue_info()
 */
function boincuser_delete_cron_queue_info() {
  $queues = array();
  $queues['queue_disable'] = array(
    'worker callback' => '_boincuser_delete_disableuser',
    'time' => 60,
  );
  $queues['queue_delete'] = array(
    'worker callback' => '_boincuser_delete_deleteuser',
    'time' => 60,
  );
  $queues['queue_notify'] = array(
    'worker callback' => '_boincuser_delete_notify',
    'time' => 60,
  );
  return $queues;
}